generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users{
id            Int           @id @default(autoincrement())
created_at    DateTime      @default(now()) 
updated_at    DateTime      @updatedAt

email         String        @unique
hash          String

firstName     String?
lastName      String?

bookmarks     bookmarks[]
 
}
 

model bookmarks{
id            Int         @id @default(autoincrement())
created_at    DateTime    @default(now()) 
updated_at    DateTime    @updatedAt
title         String
description   String?
link          String

userId        Int

user          Users       @relation(fields:[userId],references:[id])
}



model campaign_delivery_summary {
  campaign_id     String    @id @db.Uuid
  total_messages  Int?      @default(0)
  pending_count   Int?      @default(0)
  sent_count      Int?      @default(0)
  delivered_count Int?      @default(0)
  failed_count    Int?      @default(0)
  last_updated    DateTime? @default(now()) @db.Timestamp(6)
}

model communication_log {
  communication_id  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaign_id       String              @db.Uuid
  customer_id       String              @db.Uuid
  customer_email    String              @db.VarChar(255)
  customer_name     String?             @db.VarChar(255)
  message_text      String
  status            String?             @default("PENDING") @db.VarChar(20)
  attempts          Int?                @default(0)
  max_attempts      Int?                @default(3)
  vendor_ref        String?             @db.VarChar(255)
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  last_attempt_at   DateTime?           @db.Timestamp(6)
  delivered_at      DateTime?           @db.Timestamp(6)
  delivery_receipts delivery_receipts[]
}

model delivery_receipts {
  receipt_id               String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  communication_id         String                     @db.Uuid
  vendor_ref               String?                    @db.VarChar(255)
  receipt_status           String                     @db.VarChar(20)
  failure_reason           String?
  received_at              DateTime?                  @default(now()) @db.Timestamp(6)
  processed                Boolean?                   @default(false)
  communication_log        communication_log          @relation(fields: [communication_id], references: [communication_id], onDelete: NoAction, onUpdate: NoAction)
  receipt_processing_queue receipt_processing_queue[]
}

model receipt_processing_queue {
  id                Int               @id @default(autoincrement())
  receipt_id        String            @db.Uuid
  status            String?           @default("PENDING") @db.VarChar(20)
  created_at        DateTime?         @default(now()) @db.Timestamp(6)
  processed_at      DateTime?         @db.Timestamp(6)
  delivery_receipts delivery_receipts @relation(fields: [receipt_id], references: [receipt_id], onDelete: NoAction, onUpdate: NoAction)
}
